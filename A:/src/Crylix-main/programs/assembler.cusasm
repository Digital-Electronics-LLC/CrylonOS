;https://hlorenzi.github.io/customasm/web/
#subruledef registers
{
	A => 0x0
	B => 0x1
	X => 0x2
	Y => 0x3
}

#subruledef boolean
{
	left => 0x000000
	right => 0x000001
}
#subruledef CAEZN
{
	C => 0x000000
	E => 0x000001
	A => 0x000002
	Z => 0x000003
	N => 0x000004
}

#ruledef
{
	loadi {reg: registers}, {value} => 0x000002 @ value`16 @ reg`8
	load {reg: registers}, {address} => 0x000001 @ address`24 @ reg`24
	store {reg: registers}, {address} => 0x000003 @ address`24 @ reg`24
	add {regA: registers}, {regB: registers} => 0x000004 @ regA`8 @ regB`8 @ 0x00
	sub {regA: registers}, {regB: registers} => 0x000005 @ regA`8 @ regB`8 @ 0x00
	comp {regA: registers}, {regB: registers} => 0x000006 @ regA`8 @ regB `8
	and {regA: registers}, {regB: registers} => 0x000007 @ regA`8 @ regB `8
	or {regA: registers}, {regB: registers} => 0x000008 @ regA`8 @ regB `8
	xor {regA: registers}, {regB: registers} => 0x000009 @ regA`8 @ regB `8
	shift {dirc: boolean}, {regB: registers} => 0x00000a @ dirc @ regB `24
	copy {regA: registers}, {regB: registers} => 0x00000b @ regA`8 @ regB `8 @0x00
	jmpr {regA: registers} => 0x00000c @ regA`24
	jump {address} => 0x00000d @ address`24
	jmpif {address}, {condition: CAEZN} => 0x00000e @ address`24 @ condition
	inc {regA: registers} => 0x00000f @ regA`24
	dec {regA: registers} => 0x000010 @ regA`24
	push {regA: registers} => 0x000011 @ regA`24
	pop {regA: registers} => 0x000012 @ regA`24
	call {func} => 0x000013 @ func`24
	ret => 0x000014
	clf => 0x000015
	halt => 0x000016
	data {data} => data`256
	outa {reg: registers} => 0x000018 @ reg`24
	ind {addr: registers}, {regB: registers} => 0x00000b @ addr`8 @ regB `8 @0x00
	outd {addr: registers}, {regB: registers} => 0x00000b @ addr`8 @ regB `8 @0x00
	nop => 0x00001d
}

